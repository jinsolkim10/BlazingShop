@page "/product/{id:int}"
@inject IProductService ProductService
@inject ICartService CartService
@inject ILocalStorageService LocalStorage
@inject IToastService ToastService

<div class="views">
    <i class="oi oi-eye">@product.Views.ToString("0##")</i>@GetViewString();
</div>

<div class="media">
    <div class="media-img-big-wrapper mr-2">
        <img class="media-img-big" src="@product.Image" alt="@product.Title" />
    </div>
    <div class="media-body">

        <h2 class="mb-0">@product.Title</h2>
        <p>@product.Description</p>
        @if (product.Variants != null && product.Variants.Count > 1)
        {
            <div>
                <select class="form-control" @bind="currentEditionId">
                    @foreach (var item in product.Variants)
                    {
                        <option value="@item.EditionId">@item.Edition.Name</option>
                    }
                </select>
            </div>

        }
        @if (GetSelectedVarient() != null)
        {
            @if (GetSelectedVarient().OriginalPrice > GetSelectedVarient().Price)
            {
                <h6 class="text-muted original-price">@GetSelectedVarient().OriginalPrice</h6>
                <h4 class="price">
                    $@GetSelectedVarient().Price
                </h4>
            }
            @if (product.CategoryId == 4)
            {
                <a href="@product.Href">영상 시청하기</a>
            }
        }
        <EditForm Model="cartItem">
            <div class="form-group">
                <InputNumber id="quantity" @bind-Value="cartItem.Quantity" class="form-control" style="width:70px;"></InputNumber>
            </div>
        </EditForm>
        <button class="btn btn-primary" @onclick="AddToCart"><i class="oi oi-cart"></i>&nbsp;&nbsp;&nbsp;장바구니에 담기</button>

    </div>
</div>

@code {
    private Product product = new Product();

    private int currentEditionId = 1;
    private CartItem cartItem = new CartItem { Quantity = 1 };
    [Parameter]
    public int Id { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        //if (ProductService.Products == null || ProductService.Products.Count == 0)
        //{
        //    ProductService.LoadProducts();
        //}

        product = await ProductService.GetProduct(Id);//.FirstOrDefault(p => p.Id == Int32.Parse(Id));
        if (product.Variants.Count > 0)
        {
            currentEditionId = product.Variants[0].EditionId;
        }
    }

    private ProductVariant GetSelectedVarient()
    {
        var varient = product.Variants.FirstOrDefault(v => v.EditionId == currentEditionId);
        return varient;
    }

    private async Task AddToCart()
    {
        var productVariant = GetSelectedVarient();

        cartItem.EditionId = productVariant.EditionId;
        cartItem.EditionName = productVariant.Edition.Name;
        cartItem.Image = product.Image;
        cartItem.Price = productVariant.Price;
        cartItem.ProductId = productVariant.ProductId;
        cartItem.ProductTitle = product.Title;

        await CartService.AddToCart(cartItem);

        //var cart = await LocalStorage.GetItemAsync<List<ProductVariant>>("cart");
        //if(cart == null)
        //{
        //    cart = new List<ProductVariant>();
        //}
        //cart.Add(GetSelectedVarient());
        //await LocalStorage.SetItemAsync("cart", cart);
        //ToastService.ShowSuccess(product.Title, "장바구니에 담았습니다");
    }

    private string GetViewString()
    {
        if(product.Views > 1000000)
        {
            return $"{((float)product.Views / 1000000).ToString("#.##")}M";
        }
        if(product.Views > 10000)
        {
            return $"{((float)product.Views / 1000).ToString("#")}K";
        }
        if(product.Views > 1000)
        {
            return $"{((float)product.Views / 1000).ToString("#")}K";
        }
        return product.Views.ToString("0##");
    }
}
